name: create-sqs-queues
description: Create SQS Queues and Redrive Policy
author: DevOps Team

inputs:
  queueName:
    description: 'The name of the main queue'
    required: true
    default: 'my-queue.fifo'
  deadLetterQueueName:
    description: 'The name of the dead-letter queue'
    required: true
    default: 'my-queue-dl.fifo'
  queueRetentionPeriod:
    description: 'The message retention period for the main queue in seconds'
    required: false
    default: '259200'  # 3 days
  maxReceiveCount:
    description: 'The maximum number of times a message is received from the main queue before being moved to the dead-letter queue'
    required: false
    default: '4'

runs:
  using: 'composite'
  steps:
    - name: Provision SQS Queues and Redrive Policy
      shell: bash
      run: |
        set -e
        # Create dead-letter queue
        if ! aws sqs get-queue-url --queue-name "${inputs.deadLetterQueueName}" >/dev/null 2>&1; then
          echo "Creating SQS Dead-Letter Queue '${inputs.deadLetterQueueName}'"
          deadLetterQueueUrl=$(aws sqs create-queue --queue-name "${inputs.deadLetterQueueName}" --attributes FifoQueue=true)
          echo "SQS Dead-Letter Queue '${inputs.deadLetterQueueName}' created. URL: ${deadLetterQueueUrl}"
        else
          echo "SQS Dead-Letter Queue '${inputs.deadLetterQueueName}' already exists."
          deadLetterQueueUrl=$(aws sqs get-queue-url --queue-name "${inputs.deadLetterQueueName}")
        fi

        # Get only dead-letter queue URL without the queue name
        deadLetterQueueUrl=$(echo "${deadLetterQueueUrl}" | jq -r '.QueueUrl')

        echo "SQS Dead-Letter Queue  '${inputs.deadLetterQueueName}' URL: ${deadLetterQueueUrl}"

        # Retrieve dead-letter queue ARN
        deadLetterQueueArn=$(aws sqs get-queue-attributes --queue-url "${deadLetterQueueUrl}" --attribute-names QueueArn | jq -r '.Attributes.QueueArn')
        echo "SQS Dead-Letter Queue '${inputs.deadLetterQueueName}' ARN: ${deadLetterQueueArn}"

        if [[ $(aws sqs list-queues --queue-name-prefix "${inputs.queueName}") ]]; then
          echo "SQS Queue '${inputs.queueName}' already exists"
        else
          echo "Creating SQS Queue '${inputs.queueName}'"
          REDRIVE_POLICY=$(jq -n \
            --arg dlqa "${deadLetterQueueArn}" \
            --arg mrc "${inputs.maxReceiveCount}" \
            '{deadLetterTargetArn: $dlqa, maxReceiveCount: $mrc}' | jq tostring)
          JSON_STRING=$(jq -n \
            --arg rp "${inputs.retentionPeriod}" \
            --arg rp "${REDRIVE_POLICY}" \
            '{RedrivePolicy: $rp, MessageRetentionPeriod: $rp, FifoQueue: "true"}' | jq tostring)
          echo "${deadLetterQueueArn}"
          aws sqs create-queue --queue-name "${inputs.queueName}" --attributes "$JSON_STRING"
          echo "SQS Queue '${inputs.queueName}' created successfully"
        fi