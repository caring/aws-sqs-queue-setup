name: create-sqs-queues
description: Create SQS Queues and Redrive Policy
author: DevOps Team

inputs:
  queueName:
    description: 'The name of the main queue'
    required: true
    default: 'my-queue.fifo'
  deadLetterQueueName:
    description: 'The name of the dead-letter queue'
    required: true
    default: 'my-queue-dl.fifo'
  queueRetentionPeriod:
    description: 'The message retention period for the main queue in seconds'
    required: false
    default: '259200'  # 3 days
  maxReceiveCount:
    description: 'The maximum number of times a message is received from the main queue before being moved to the dead-letter queue'
    required: false
    default: '4'

runs:
  using: 'composite'
  steps:
    - name: Provision SQS Queues and Redrive Policy
      shell: bash
      run: |
          set -e
  
          # Create or retrieve dead-letter queue
          if ! aws sqs get-queue-url --queue-name "${{ inputs.deadLetterQueueName }}" >/dev/null 2>&1; then
            echo "Creating SQS Dead-Letter Queue '${{ inputs.deadLetterQueueName }}'"
            aws sqs create-queue --queue-name "${{ inputs.deadLetterQueueName }}" --attributes FifoQueue=true
            deadLetterQueueUrl=$(aws sqs get-queue-url --queue-name "${{ inputs.deadLetterQueueName }}" | jq -r '.QueueUrl')
            echo "SQS Dead-Letter Queue '${{ inputs.deadLetterQueueName }}' created. URL: ${deadLetterQueueUrl}"
          else
            echo "SQS Dead-Letter Queue '${{ inputs.deadLetterQueueName }}' already exists."
            deadLetterQueueUrl=$(aws sqs get-queue-url --queue-name "${{ inputs.deadLetterQueueName }}" | jq -r '.QueueUrl')
            echo "SQS Dead-Letter Queue '${{ inputs.deadLetterQueueName }}' URL: ${deadLetterQueueUrl}"
          fi
  
          # Retrieve dead-letter queue ARN
          deadLetterQueueArn=$(aws sqs get-queue-attributes --queue-url "${deadLetterQueueUrl}" --attribute-names QueueArn | jq -r '.Attributes.QueueArn')
  
          # Create or retrieve main queue
          if aws sqs get-queue-url --queue-name "${{ inputs.queueName }}" >/dev/null 2>&1; then
            echo "SQS Queue '${{ inputs.queueName }}' already exists"
            queueUrl=$(aws sqs get-queue-url --queue-name "${{ inputs.queueName }}" | jq -r '.QueueUrl')
            echo "SQS Queue '${{ inputs.queueName }}' URL: ${queueUrl}"
          else
            echo "Creating SQS Queue '${{ inputs.queueName }}'"
            redrivePolicy=$(jq -n \
              --arg dlqa "${deadLetterQueueArn}" \
              --arg mrc "${{ inputs.maxReceiveCount }}" \
              '{deadLetterTargetArn: $dlqa, maxReceiveCount: $mrc}')
            jsonAttributes=$(jq -n \
              --arg qrp "${{ inputs.queueRetentionPeriod }}" \
              --arg rp "${redrivePolicy}" \
              '{RedrivePolicy: $rp, MessageRetentionPeriod: $qrp, FifoQueue: "true"}')
            aws sqs create-queue --queue-name "${{ inputs.queueName }}" --attributes "$jsonAttributes"
            echo "SQS Queue '${{ inputs.queueName }}' created successfully"
            queueUrl=$(aws sqs get-queue-url --queue-name "${{ inputs.queueName }}" | jq -r '.QueueUrl')
            echo "SQS Queue '${{ inputs.queueName }}' URL: ${queueUrl}"
          fi
  
          # Output queue URL and queue names
          echo "queueUrl=${queueUrl}" >> $GITHUB_ENV
          echo "queueName=${{ inputs.queueName }}" >> $GITHUB_ENV
          echo "deadLetterQueueUrl=${deadLetterQueueUrl}" >> $GITHUB_ENV
          echo "deadLetterQueueName=${{ inputs.deadLetterQueueName }}" >> $GITHUB_ENV