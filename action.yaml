name: create-sqs-queues
description: Create SQS Queues and Redrive Policy if not exist
author: DevOps Team

inputs:
  queueName:
    description: 'The name of the main queue'
    required: true
    default: 'my-queue.fifo'
  deadLetterQueueName:
    description: 'The name of the dead-letter queue'
    required: true
    default: 'my-queue-dl.fifo'
  queueRetentionPeriod:
    description: 'The message retention period for the main queue in seconds'
    required: false
    default: '259200'  # 3 days
  maxReceiveCount:
    description: 'The maximum number of times a message is received from the main queue before being moved to the dead-letter queue'
    required: false
    default: '4'

runs:
  using: 'composite'
  steps:
    - name: Provision SQS Queues and Redrive Policy
      shell: bash
      run: |
        set -e

        # Create main queue
        if ! aws sqs get-queue-url --queue-name "${{ inputs.queueName }}" >/dev/null 2>&1; then
          echo "Creating SQS Queue '${{ inputs.queueName }}'"
          queueUrl=$(aws sqs create-queue --queue-name "${{ inputs.queueName }}" --attributes FifoQueue=true,MessageRetentionPeriod="${{ inputs.queueRetentionPeriod }}")
          echo "SQS Queue '${{ inputs.queueName }}' created. URL: ${queueUrl}"
        else
          echo "SQS Queue '${{ inputs.queueName }}' already exists."
          queueUrl=$(aws sqs get-queue-url --queue-name "${{ inputs.queueName }}")
        fi

        # Create dead-letter queue
        if ! aws sqs get-queue-url --queue-name "${{ inputs.deadLetterQueueName }}" >/dev/null 2>&1; then
          echo "Creating SQS Dead-Letter Queue '${{ inputs.deadLetterQueueName }}'"
          deadLetterQueueUrl=$(aws sqs create-queue --queue-name "${{ inputs.deadLetterQueueName }}" --attributes FifoQueue=true)
          echo "SQS Dead-Letter Queue '${{ inputs.deadLetterQueueName }}' created. URL: ${deadLetterQueueUrl}"
        else
          echo "SQS Dead-Letter Queue '${{ inputs.deadLetterQueueName }}' already exists."
          deadLetterQueueUrl=$(aws sqs get-queue-url --queue-name "${{ inputs.deadLetterQueueName }}")
        fi

        # Create or update redrive policy
        redrivePolicy=$(jq -n --arg dlq "$deadLetterQueueUrl" --arg count "$maxReceiveCount" '{deadLetterTargetArn: $dlq, maxReceiveCount: $count}')
        aws sqs set-queue-attributes --queue-url "${queueUrl}" --attributes "{\"RedrivePolicy\": \"${redrivePolicy}\"}"

        # Output queue URLs and ARNs
        echo "::set-output name=queueUrl::${queueUrl}"
        echo "::set-output name=deadLetterQueueUrl::${deadLetterQueueUrl}"
        echo "::set-output name=queueArn::$(aws sqs get-queue-attributes --queue-url "${queueUrl}" --attribute-names QueueArn | jq -r '.Attributes.QueueArn')"
        echo "::set-output name=deadLetterQueueArn::$(aws sqs get-queue-attributes --queue-url "${deadLetterQueueUrl}" --attribute-names QueueArn | jq -r '.Attributes.QueueArn